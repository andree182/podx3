From eee7a9799a7d4f04f2c362927fe15391e2e5d2ca Mon Sep 17 00:00:00 2001
From: Andrej Krutak <dev@andree.sk>
Date: Tue, 17 Nov 2015 21:27:27 +0100
Subject: [PATCH 14/14] Replace init messages by sysfs entries + cleanup.

---
 sound/usb/line6/capture.c |   5 ++
 sound/usb/line6/podhd.c   | 123 ++++++++++++++++++----------------------------
 2 files changed, 53 insertions(+), 75 deletions(-)

diff --git a/sound/usb/line6/capture.c b/sound/usb/line6/capture.c
index c64a863..dfa03c6 100644
--- a/sound/usb/line6/capture.c
+++ b/sound/usb/line6/capture.c
@@ -185,6 +185,11 @@ static void audio_in_callback(struct urb *urb)
 
 #if LINE6_ISO_PACKETS != 1
 # error "The following assumes LINE6_ISO_PACKETS == 1"
+/* TODO:
+   Also, if iso_buffers != 2, the prev frame is almost random at playback side.
+   This needs to be redesigned. It should be "stable", but we may experience
+   sync problems on such high-speed configs.
+*/
 #endif
 		line6pcm->prev_fbuf = fbuf;
 		line6pcm->prev_fsize = fsize /
diff --git a/sound/usb/line6/podhd.c b/sound/usb/line6/podhd.c
index d73106e..e80eb8b 100644
--- a/sound/usb/line6/podhd.c
+++ b/sound/usb/line6/podhd.c
@@ -54,68 +54,10 @@ struct usb_line6_podhd {
 	/* Serial number of device */
 	u32 serial_number;
 
-	/* Firmware version (x 100) */
+	/* Firmware version */
 	int firmware_version;
-
-	/* Device ID */
-	int device_id;
 };
 
-/**
- * Sequences:
- *
- * Init:
- *
- * out: 14 00 01 00|04 00 0A 40 01 03 00 20 00 00 00 00 00 00 00 00 00 00 00 00
- * out: 0C 00 01 00|02 00 0A 40 01 03 00 21 03 00 00 00
- *
- * in:  14 00 01 00|04 00 0A 03 01 40 00 22 00 00 00 00 03 00 00 00 00 00 00 00
-**/
-
-struct usb_line6_podhd_message {
-	u8 packet_data_len;
-	u8 unkn1;
-#define PODHD_MSG_FLAG_FIRST (0x01)
-#define PODHD_MSG_FLAG_FOLLOWUP (0x04)
-	u8 flags;
-	u8 unkn2;
-
-	u8 packet_data[];
-} __attribute__((packed));
-
-struct usb_line6_podhd_packet {
-#define PODHD_PKT_TYPE_FULL_CONFIG 0x01
-#define PODHD_PKT_TYPE_SET_EFFECT 0x02
-#define PODHD_PKT_TYPE_INIT 0x03 /* ??? */
-#define PODHD_PKT_TYPE_FLAG_SET 0x04 /* turn effects on/off */
-#define PODHD_PKT_TYPE_FLOAT_PARAMETER1 0x05
-#define PODHD_PKT_TYPE_FLOAT_PARAMETER2 0x06
-	u8 pkt_type;
-	union {
-		u8 data[256];
-		struct {
-			/* pkt_types 01/02/04/05/06 */
-			/* input from POD:
-			 * usually 01: 04 0A 03 01|02 40 00 01 [...]
-			 * usually 04: 00 0A 03 01|02 40 00 01 [...]
-			 *                   ^        ^
-			 *                   40       30 ... output
-			 */
-			u8 unkn1[2];
-			u8 src;
-			u8 flag1;
-			u8 dst;
-			u8 unkn2;
-			u8 subdata_len;
-			u8 data[];
-		} contents_1 ;
-		struct {
-			/* pkt_type 03 */
-			/* 10 00 01 00 03 00 02 01 04 89|2E 40 00 00 00 00 FF 00 00 00 02 */
-		} contents_2;
-	} packet;
-} __attribute__((packed));
-
 #define PODHD_BYTES_PER_CHANNEL 3	/* 24bit audio (stereo) */
 
 static struct snd_ratden podhd_ratden = {
@@ -172,6 +114,27 @@ static void podhd_startup_start_workqueue(unsigned long data);
 static void podhd_startup_workqueue(struct work_struct *work);
 static int podhd_startup_finalize(struct usb_line6_podhd *pod);
 
+static ssize_t serial_number_show(struct device *dev,
+				  struct device_attribute *attr, char *buf)
+{
+	struct usb_interface *interface = to_usb_interface(dev);
+	struct usb_line6_podhd *pod = usb_get_intfdata(interface);
+
+	return sprintf(buf, "%u\n", pod->serial_number);
+}
+
+static ssize_t firmware_version_show(struct device *dev,
+				     struct device_attribute *attr, char *buf)
+{
+	struct usb_interface *interface = to_usb_interface(dev);
+	struct usb_line6_podhd *pod = usb_get_intfdata(interface);
+
+	return sprintf(buf, "%06x\n", pod->firmware_version);
+}
+
+static DEVICE_ATTR_RO(firmware_version);
+static DEVICE_ATTR_RO(serial_number);
+
 static void line6_podhd_process_message(struct usb_line6 *line6)
 {
 	struct usb_line6_podhd *pod = (struct usb_line6_podhd *) line6;
@@ -247,26 +210,14 @@ static int podhd_dev_start(struct usb_line6_podhd *pod)
 		return ret;
 	}
 
-#if 1
-	/* 20 10 04 */
-	printk("PODHDdevstart: %02x %02x %02x\n", (int)init_bytes[0], (int)init_bytes[1], (int)init_bytes[2]);
-#endif
+	pod->firmware_version =
+		(init_bytes[0] << 16) | (init_bytes[1] << 8) | (init_bytes[2] << 0);
 
 	for (i = 0; i <= 16; i++) {
 		ret = line6_read_data(&pod->line6, 0xf000 + 0x08 * i, init_bytes, 8);
 		if (ret < 0) {
 			return ret;
 		}
-#if 1
-		printk("PODHDdevstart %x: ", 0xf000 + 0x08 * i);
-		{
-			int j;
-			for (j = 0; j < 8; j++) {
-				printk("%02x ", init_bytes[j]);
-			}
-			printk("\n");
-		}
-#endif
 	}
 
 	ret = usb_control_msg(usbdev, usb_sndctrlpipe(usbdev, 0), USB_REQ_SET_FEATURE,
@@ -296,7 +247,6 @@ static void podhd_startup_workqueue(struct work_struct *work)
 		// TODO: abort
 		return;
 	}
-	printk("podhd serial#: %d\n", pod->serial_number);
 
 	podhd_startup_finalize(pod);
 }
@@ -305,16 +255,32 @@ static int podhd_startup_finalize(struct usb_line6_podhd *pod)
 {
 	struct usb_line6 *line6 = &pod->line6;
 
-	printk("podhd startup - finished\n");
 	/* ALSA audio interface: */
 	return snd_card_register(line6->card);
 }
 
+static int podhd_create_files(struct device *dev)
+{
+	int err;
+
+	err = device_create_file(dev, &dev_attr_firmware_version);
+	if (err < 0)
+		return err;
+	err = device_create_file(dev, &dev_attr_serial_number);
+	if (err < 0)
+		return err;
+	return 0;
+}
+
 static void podhd_disconnect(struct usb_line6 *line6)
 {
 	struct usb_line6_podhd *pod = (struct usb_line6_podhd *)line6;
 
 	if (pod->line6.properties->capabilities & LINE6_CAP_CONTROL) {
+		struct device *dev = line6->ifcdev;
+		device_remove_file(dev, &dev_attr_firmware_version);
+		device_remove_file(dev, &dev_attr_serial_number);
+
 		del_timer_sync(&pod->startup_timer);
 		cancel_work_sync(&pod->startup_work);
 	}
@@ -332,6 +298,13 @@ static int podhd_init(struct usb_line6 *line6,
 	line6->process_message = line6_podhd_process_message;
 	line6->disconnect = podhd_disconnect;
 
+	if (pod->line6.properties->capabilities & LINE6_CAP_CONTROL) {
+		/* create sysfs entries: */
+		err = podhd_create_files(line6->ifcdev);
+		if (err < 0)
+			return err;
+	}
+
 	/* initialize MIDI subsystem: */
 	err = line6_init_midi(line6);
 	if (err < 0)
-- 
1.9.1

