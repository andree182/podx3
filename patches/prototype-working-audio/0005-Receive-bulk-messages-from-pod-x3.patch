From 1f46065c561a94e3961264d025d331eb23a804dd Mon Sep 17 00:00:00 2001
From: Andrej Krutak <dev@andree.sk>
Date: Sun, 17 May 2015 21:48:21 +0200
Subject: [PATCH 05/14] Receive bulk messages from pod x3

---
 sound/usb/line6/driver.c | 30 +++++++++++++++++++++---------
 sound/usb/line6/driver.h |  2 +-
 sound/usb/line6/podhd.c  | 39 ++++++++++++++++++++++++++++++++-------
 3 files changed, 54 insertions(+), 17 deletions(-)

diff --git a/sound/usb/line6/driver.c b/sound/usb/line6/driver.c
index cb4c967..19fc5ad 100644
--- a/sound/usb/line6/driver.c
+++ b/sound/usb/line6/driver.c
@@ -66,12 +66,15 @@ static int line6_start_listen(struct usb_line6 *line6)
 {
 	int err;
 
-	usb_fill_int_urb(line6->urb_listen, line6->usbdev,
+	usb_fill_bulk_urb(line6->urb_listen, line6->usbdev,
 		usb_rcvbulkpipe(line6->usbdev, line6->properties->ep_ctrl_r),
 		line6->buffer_listen, LINE6_BUFSIZE_LISTEN,
-		line6_data_received, line6, line6->interval);
+		line6_data_received, line6);
 	line6->urb_listen->actual_length = 0;
+
 	err = usb_submit_urb(line6->urb_listen, GFP_ATOMIC);
+	if (err < 0)
+		dev_err(line6->ifcdev, "error submitting urb (%d)\n", err);
 	return err;
 }
 
@@ -140,10 +143,10 @@ static int line6_send_raw_message_async_part(struct message *msg,
 	int done = msg->done;
 	int bytes = min(msg->size - done, line6->max_packet_size);
 
-	usb_fill_int_urb(urb, line6->usbdev,
+	usb_fill_bulk_urb(urb, line6->usbdev,
 		usb_sndbulkpipe(line6->usbdev, line6->properties->ep_ctrl_w),
 		(char *)msg->buffer + done, bytes,
-		line6_async_request_sent, msg, line6->interval);
+		line6_async_request_sent, msg);
 
 	msg->done += bytes;
 	retval = usb_submit_urb(urb, GFP_ATOMIC);
@@ -263,13 +266,17 @@ EXPORT_SYMBOL_GPL(line6_alloc_sysex_buffer);
 static void line6_data_received(struct urb *urb)
 {
 	struct usb_line6 *line6 = (struct usb_line6 *)urb->context;
-	struct midi_buffer *mb = &line6->line6midi->midibuf_in;
-	int done;
 
-	if (urb->status == -ESHUTDOWN)
+	if (urb->status < 0) {
+		printk("Error receiving URB %d!\n", urb->status);
+		line6_start_listen(line6);
 		return;
+	}
 
 	if (line6->properties->capabilities & LINE6_CAP_CONTROL_MIDI) {
+		struct midi_buffer *mb = &line6->line6midi->midibuf_in;
+		int done;
+
 		done =
 			line6_midibuf_write(mb, urb->transfer_buffer, urb->actual_length);
 
@@ -294,8 +301,13 @@ static void line6_data_received(struct urb *urb)
 				line6->process_message(line6);
 		}
 	} else {
-		if (line6->process_message)
+		if (line6->process_message) {
+			memcpy(line6->buffer_message, urb->transfer_buffer,
+				urb->actual_length);
+			line6->message_length = urb->actual_length;
+
 			line6->process_message(line6);
+		}
 	}
 
 	line6_start_listen(line6);
@@ -474,7 +486,7 @@ static void line6_get_interval(struct usb_line6 *line6)
 	ep = usbdev->ep_in[epnum];
 	if (ep) {
 		line6->interval = ep->desc.bInterval;
-		line6->max_packet_size = le16_to_cpu(ep->desc.wMaxPacketSize);
+		line6->max_packet_size = le16_to_cpu(ep->desc.wMaxPacketSize); /* TODO: This should be used also for input?! */
 	} else {
 		dev_err(line6->ifcdev,
 			"endpoint not available, using fallback values");
diff --git a/sound/usb/line6/driver.h b/sound/usb/line6/driver.h
index 8971cf6..18d6c5d 100644
--- a/sound/usb/line6/driver.h
+++ b/sound/usb/line6/driver.h
@@ -25,7 +25,7 @@
 #define LINE6_FALLBACK_MAXPACKETSIZE 16
 
 #define LINE6_TIMEOUT 1
-#define LINE6_BUFSIZE_LISTEN 32
+#define LINE6_BUFSIZE_LISTEN 64
 #define LINE6_MESSAGE_MAXLEN 256
 
 /*
diff --git a/sound/usb/line6/podhd.c b/sound/usb/line6/podhd.c
index 3bf6444..5837ad0 100644
--- a/sound/usb/line6/podhd.c
+++ b/sound/usb/line6/podhd.c
@@ -18,7 +18,7 @@
 #include "driver.h"
 #include "pcm.h"
 
-#define PODHD_STARTUP_DELAY 1000
+#define PODHD_STARTUP_DELAY 500
 
 /*
 	Stages of POD startup procedure
@@ -61,6 +61,17 @@ struct usb_line6_podhd {
 	int device_id;
 };
 
+/**
+ * Sequences:
+ *
+ * Init:
+ *
+ * out: 14 00 01 00|04 00 0A 40 01 03 00 20 00 00 00 00 00 00 00 00 00 00 00 00
+ * out: 0C 00 01 00|02 00 0A 40 01 03 00 21 03 00 00 00
+ *
+ * in:  14 00 01 00|04 00 0A 03 01 40 00 22 00 00 00 00 03 00 00 00 00 00 00 00
+**/
+
 struct usb_line6_podhd_frame {
 	u8 data_len;
 	u8 unkn1;
@@ -81,8 +92,8 @@ struct usb_line6_podhd_frame {
 		struct {
 			/* pkt_types 01/02/04/05/06 */
 			/* input from POD:
-			 * usually 01: 04 0A 03 01|02 40 00 01] [...]
-			 * usually 04: 00 0A 03 01|02 40 00 01] [...]
+			 * usually 01: 04 0A 03 01|02 40 00 01 [...]
+			 * usually 04: 00 0A 03 01|02 40 00 01 [...]
 			 *                   ^        ^
 			 *                   40       30 ... output
 			 */
@@ -156,6 +167,18 @@ static void podhd_startup_start_workqueue(unsigned long data);
 static void podhd_startup_workqueue(struct work_struct *work);
 static int podhd_startup_finalize(struct usb_line6_podhd *pod);
 
+static void line6_podhd_process_message(struct usb_line6 *line6)
+{
+	struct usb_line6_podhd *pod = (struct usb_line6_podhd *) line6;
+	const unsigned char *buf = pod->line6.buffer_message;
+	int len = pod->line6.message_length;
+
+	if (len <= 0)
+		return;
+
+	printk("l6urb: %d:%02x %02x %02x %02x\n", len, buf[0], buf[1], buf[2], buf[3]);
+}
+
 /*
  * POD X3 startup procedure.
  * TODO: Check whether it's also compatible with POD HD's.
@@ -166,14 +189,15 @@ static void podhd_startup(struct usb_line6_podhd *pod)
 	CHECK_STARTUP_PROGRESS(pod->startup_progress, PODHD_STARTUP_INIT);
 
 	/* delay startup procedure: */
-	line6_start_timer(&pod->startup_timer, PODHD_STARTUP_DELAY, podhd_startup_start_workqueue,
-			  (unsigned long)pod);
+	line6_start_timer(&pod->startup_timer, PODHD_STARTUP_DELAY,
+		podhd_startup_start_workqueue, (unsigned long)pod);
 }
 
 static void podhd_startup_start_workqueue(unsigned long data)
 {
 	struct usb_line6_podhd *pod = (struct usb_line6_podhd *)data;
-	CHECK_STARTUP_PROGRESS(pod->startup_progress, PODHD_STARTUP_SCHEDULE_WORKQUEUE);
+	CHECK_STARTUP_PROGRESS(pod->startup_progress,
+		PODHD_STARTUP_SCHEDULE_WORKQUEUE);
 
 	/* schedule work for global work queue: */
 	schedule_work(&pod->startup_work);
@@ -263,7 +287,7 @@ static int podhd_startup_finalize(struct usb_line6_podhd *pod)
 {
 	struct usb_line6 *line6 = &pod->line6;
 
-	printk("podhd startup - finalizing\n");
+	printk("podhd startup - finished\n");
 	/* ALSA audio interface: */
 	return snd_card_register(line6->card);
 }
@@ -287,6 +311,7 @@ static int podhd_init(struct usb_line6 *line6,
 	int err;
 	struct usb_line6_podhd *pod = (struct usb_line6_podhd *) line6;
 
+	line6->process_message = line6_podhd_process_message;
 	line6->disconnect = podhd_disconnect;
 
 	/* initialize MIDI subsystem: */
-- 
1.9.1

