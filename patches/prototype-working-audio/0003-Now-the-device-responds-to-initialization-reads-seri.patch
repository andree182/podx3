From a57b1965213d149d6920281f33b2ca6ba51b1d28 Mon Sep 17 00:00:00 2001
From: Andrej Krutak <dev@andree.sk>
Date: Fri, 8 May 2015 14:46:24 +0200
Subject: [PATCH 03/14] Now the device responds to initialization, reads
 serial#.

---
 sound/usb/line6/podhd.c | 120 ++++++++++++++++++++++++++++++++++++++++++++----
 1 file changed, 112 insertions(+), 8 deletions(-)

diff --git a/sound/usb/line6/podhd.c b/sound/usb/line6/podhd.c
index e713dc4..ac59523 100644
--- a/sound/usb/line6/podhd.c
+++ b/sound/usb/line6/podhd.c
@@ -25,7 +25,7 @@
 */
 enum {
 	PODHD_STARTUP_INIT = 1,
-	PODHD_STARTUP_WORKQUEUE,
+	PODHD_STARTUP_SCHEDULE_WORKQUEUE,
 	PODHD_STARTUP_SETUP,
 	PODHD_STARTUP_LAST = PODHD_STARTUP_SETUP - 1
 };
@@ -61,6 +61,46 @@ struct usb_line6_podhd {
 	int device_id;
 };
 
+struct usb_line6_podhd_frame {
+	u8 data_len;
+	u8 unkn1;
+#define PODHD_MSG_FLAG_FIRST (0x01)
+#define PODHD_MSG_FLAG_FOLLOWUP (0x04)
+	u8 flags;
+	u8 unkn2;
+
+#define PODHD_PKT_TYPE_FULL_CONFIG 0x01
+#define PODHD_PKT_TYPE_SET_EFFECT 0x02
+#define PODHD_PKT_TYPE_INIT 0x03 /* ??? */
+#define PODHD_PKT_TYPE_FLAG_SET 0x04 /* turn effects on/off */
+#define PODHD_PKT_TYPE_FLOAT_PARAMETER1 0x05
+#define PODHD_PKT_TYPE_FLOAT_PARAMETER2 0x06
+	u8 pkt_type;
+	union {
+		u8 data[256];
+		struct {
+			/* pkt_types 01/02/04/05/06 */
+			/* input from POD:
+			 * usually 01: 04 0A 03 01|02 40 00 01] [...]
+			 * usually 04: 00 0A 03 01|02 40 00 01] [...]
+			 *                   ^        ^
+			 *                   40       30 ... output
+			 */
+			u8 unkn1[2];
+			u8 src;
+			u8 flag1;
+			u8 dst;
+			u8 unkn2;
+			u8 subdata_len;
+			u8 data[];
+		} contents_1 ;
+		struct {
+			/* pkt_type 03 */
+			/* 10 00 01 00 03 00 02 01 04 89|2E 40 00 00 00 00 FF 00 00 00 02 */
+		} contents_2;
+	} packet;
+} __attribute__((packed));
+
 #define PODHD_BYTES_PER_FRAME 6	/* 24bit audio (stereo) */
 
 static struct snd_ratden podhd_ratden = {
@@ -117,7 +157,7 @@ static void podhd_startup_workqueue(struct work_struct *work);
 static int podhd_startup_finalize(struct usb_line6_podhd *pod);
 
 /*
- *	POD X3 startup procedure.
+ * POD X3 startup procedure.
  * TODO: Check whether it's also compatible with POD HD's.
  */
 
@@ -125,7 +165,6 @@ static void podhd_startup(struct usb_line6_podhd *pod)
 {
 	CHECK_STARTUP_PROGRESS(pod->startup_progress, PODHD_STARTUP_INIT);
 
-	printk("podhd startup - timer\n");
 	/* delay startup procedure: */
 	line6_start_timer(&pod->startup_timer, PODHD_STARTUP_DELAY, podhd_startup_start_workqueue,
 			  (unsigned long)pod);
@@ -134,13 +173,71 @@ static void podhd_startup(struct usb_line6_podhd *pod)
 static void podhd_startup_start_workqueue(unsigned long data)
 {
 	struct usb_line6_podhd *pod = (struct usb_line6_podhd *)data;
-	CHECK_STARTUP_PROGRESS(pod->startup_progress, PODHD_STARTUP_WORKQUEUE);
+	CHECK_STARTUP_PROGRESS(pod->startup_progress, PODHD_STARTUP_SCHEDULE_WORKQUEUE);
 
-	printk("podhd startup - schedule work queue\n");
 	/* schedule work for global work queue: */
 	schedule_work(&pod->startup_work);
 }
 
+static int podhd_dev_start(struct usb_line6_podhd *pod)
+{
+	int ret;
+	u8 init_bytes[8];
+	int i;
+	struct usb_device *usbdev = pod->line6.usbdev;
+
+	ret = usb_control_msg(usbdev, usb_sndctrlpipe(usbdev, 0),
+					0x67, USB_TYPE_VENDOR | USB_RECIP_DEVICE | USB_DIR_OUT,
+					0x11, 0,
+					NULL, 0, LINE6_TIMEOUT * HZ);
+	if (ret < 0) {
+		dev_err(pod->line6.ifcdev, "read request failed (error %d)\n", ret);
+		return ret;
+	}
+
+	ret = usb_control_msg(usbdev, usb_rcvctrlpipe(usbdev, 0), 0x67,
+					USB_TYPE_VENDOR | USB_RECIP_DEVICE | USB_DIR_IN,
+					0x11, 0x0,
+					&init_bytes, 3, LINE6_TIMEOUT * HZ);
+	if (ret < 0) {
+		dev_err(pod->line6.ifcdev,
+			"receive length failed (error %d)\n", ret);
+		return ret;
+	}
+
+#if 1
+	/* 20 10 04 */
+	printk("PODHDdevstart: %02x %02x %02x\n", (int)init_bytes[0], (int)init_bytes[1], (int)init_bytes[2]);
+#endif
+
+	for (i = 0; i <= 16; i++) {
+		ret = line6_read_data(&pod->line6, 0xf000 + 0x08 * i, init_bytes, 8);
+		if (ret < 0) {
+			return ret;
+		}
+#if 1
+		printk("PODHDdevstart %x: ", 0xf000 + 0x08 * i);
+		{
+			int j;
+			for (j = 0; j < 8; j++) {
+				printk("%02x ", init_bytes[j]);
+			}
+			printk("\n");
+		}
+#endif
+	}
+
+	ret = usb_control_msg(usbdev, usb_sndctrlpipe(usbdev, 0), USB_REQ_SET_FEATURE,
+					USB_TYPE_STANDARD | USB_RECIP_DEVICE | USB_DIR_OUT,
+					1, 0,
+					NULL, 0, LINE6_TIMEOUT * HZ);
+	if (ret < 0) {
+		return ret;
+	}
+
+	return 0;
+}
+
 static void podhd_startup_workqueue(struct work_struct *work)
 {
 	struct usb_line6_podhd *pod =
@@ -148,9 +245,16 @@ static void podhd_startup_workqueue(struct work_struct *work)
 
 	CHECK_STARTUP_PROGRESS(pod->startup_progress, PODHD_STARTUP_SETUP);
 
-	printk("podhd startup - in setup\n");
-	/* serial number: */
-// 	line6_read_serial_number(&pod->line6, &pod->serial_number);
+	if (podhd_dev_start(pod) != 0) {
+		// TODO: abort
+		return;
+	}
+
+	if (line6_read_serial_number(&pod->line6, &pod->serial_number) != 0) {
+		// TODO: abort
+		return;
+	}
+	printk("podhd serial#: %d\n", pod->serial_number);
 
 	podhd_startup_finalize(pod);
 }
-- 
1.9.1

