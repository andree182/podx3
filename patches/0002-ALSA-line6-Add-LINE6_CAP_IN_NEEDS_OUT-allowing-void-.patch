From 8a4b01d97bf345d1113dcd13996326db9e16872a Mon Sep 17 00:00:00 2001
From: Andrej Krutak <dev@andree.sk>
Date: Sat, 21 Nov 2015 21:56:00 +0100
Subject: [PATCH 02/14] ALSA: line6: Add LINE6_CAP_IN_NEEDS_OUT, allowing void
 playback stream during capture

E.g. POD X3 seems to require playback data to be sent to it to generate capture data.
Otherwise the device stalls and doesn't send any more capture data until it's reset.

Signed-off-by: Andrej Krutak <dev@andree.sk>
---
 sound/usb/line6/driver.h |  4 +++-
 sound/usb/line6/pcm.c    | 21 +++++++++++++++++++--
 sound/usb/line6/pcm.h    |  1 +
 3 files changed, 23 insertions(+), 3 deletions(-)

diff --git a/sound/usb/line6/driver.h b/sound/usb/line6/driver.h
index 24cd667..0f0c45a 100644
--- a/sound/usb/line6/driver.h
+++ b/sound/usb/line6/driver.h
@@ -100,8 +100,10 @@ enum {
 	LINE6_CAP_CONTROL =	1 << 0,
 	/* device supports PCM input/output via USB */
 	LINE6_CAP_PCM =		1 << 1,
-	/* device support hardware monitoring */
+	/* device supports hardware monitoring */
 	LINE6_CAP_HWMON =	1 << 2,
+	/* device requires output data when input is read */
+	LINE6_CAP_IN_NEEDS_OUT = 1 << 4,
 };
 
 /*
diff --git a/sound/usb/line6/pcm.c b/sound/usb/line6/pcm.c
index 210c85f..649a6983 100644
--- a/sound/usb/line6/pcm.c
+++ b/sound/usb/line6/pcm.c
@@ -241,6 +241,15 @@ int snd_line6_trigger(struct snd_pcm_substream *substream, int cmd)
 		switch (cmd) {
 		case SNDRV_PCM_TRIGGER_START:
 		case SNDRV_PCM_TRIGGER_RESUME:
+			if ((s->stream == SNDRV_PCM_STREAM_CAPTURE) &&
+				(line6pcm->line6->properties->capabilities &
+					LINE6_CAP_IN_NEEDS_OUT)
+			)
+			{
+				err = line6_pcm_acquire(line6pcm, LINE6_STREAM_CAPTURE_HELPER);
+				if (err < 0)
+					return err;
+			}
 			err = line6_stream_start(line6pcm, s->stream,
 						 LINE6_STREAM_PCM);
 			if (err < 0)
@@ -249,6 +258,13 @@ int snd_line6_trigger(struct snd_pcm_substream *substream, int cmd)
 
 		case SNDRV_PCM_TRIGGER_STOP:
 		case SNDRV_PCM_TRIGGER_SUSPEND:
+			if ((s->stream == SNDRV_PCM_STREAM_CAPTURE) &&
+				(line6pcm->line6->properties->capabilities &
+					LINE6_CAP_IN_NEEDS_OUT)
+			)
+			{
+				line6_pcm_release(line6pcm, LINE6_STREAM_CAPTURE_HELPER);
+			}
 			line6_stream_stop(line6pcm, s->stream,
 					  LINE6_STREAM_PCM);
 			break;
@@ -290,10 +306,11 @@ int line6_pcm_acquire(struct snd_line6_pcm *line6pcm, int type)
 	struct line6_pcm_stream *pstr;
 	int ret = 0, dir;
 
+	/* TODO: We should assert SNDRV_PCM_STREAM_PLAYBACK/CAPTURE == 0/1 */
 	mutex_lock(&line6pcm->state_mutex);
 	for (dir = 0; dir < 2; dir++) {
 		pstr = get_stream(line6pcm, dir);
-		ret = line6_buffer_acquire(line6pcm, pstr, type);
+		ret = line6_buffer_acquire(line6pcm, pstr, dir, type);
 		if (ret < 0)
 			goto error;
 		if (!pstr->running)
@@ -338,7 +355,7 @@ int snd_line6_hw_params(struct snd_pcm_substream *substream,
 	struct line6_pcm_stream *pstr = get_stream(line6pcm, substream->stream);
 
 	mutex_lock(&line6pcm->state_mutex);
-	ret = line6_buffer_acquire(line6pcm, pstr, LINE6_STREAM_PCM);
+	ret = line6_buffer_acquire(line6pcm, pstr, substream->stream, LINE6_STREAM_PCM);
 	if (ret < 0)
 		goto error;
 
diff --git a/sound/usb/line6/pcm.h b/sound/usb/line6/pcm.h
index 58d36f9..d174e6c 100644
--- a/sound/usb/line6/pcm.h
+++ b/sound/usb/line6/pcm.h
@@ -72,6 +72,7 @@ enum {
 	LINE6_STREAM_PCM,
 	LINE6_STREAM_MONITOR,
 	LINE6_STREAM_IMPULSE,
+	LINE6_STREAM_CAPTURE_HELPER,
 };
 
 /* misc bit flags for PCM operation */
-- 
1.9.1

