From 2193bb6906994163cbb7eacdebaaf684db48b5dd Mon Sep 17 00:00:00 2001
From: Andrej Krutak <dev@andree.sk>
Date: Thu, 7 May 2015 21:48:55 +0200
Subject: [PATCH 6/6] ALSA: line6: Allow bulk endpoints instead of interrupt
 endpoints

Some PODs (e.g. POD X3) have bulk instead of interrupt endpoints for data transfer.
---
 sound/usb/line6/driver.c | 38 +++++++++++++++++++++++++++++---------
 sound/usb/line6/driver.h |  3 +++
 2 files changed, 32 insertions(+), 9 deletions(-)

diff --git a/sound/usb/line6/driver.c b/sound/usb/line6/driver.c
index 5fd6cad..c2a6cfa 100644
--- a/sound/usb/line6/driver.c
+++ b/sound/usb/line6/driver.c
@@ -67,7 +67,7 @@ static int line6_start_listen(struct usb_line6 *line6)
 	int err;
 
 	usb_fill_int_urb(line6->urb_listen, line6->usbdev,
-		usb_rcvintpipe(line6->usbdev, line6->properties->ep_ctrl_r),
+		line6->pipe_ctrl_r,
 		line6->buffer_listen, LINE6_BUFSIZE_LISTEN,
 		line6_data_received, line6, line6->interval);
 	line6->urb_listen->actual_length = 0;
@@ -97,15 +97,21 @@ static int line6_send_raw_message(struct usb_line6 *line6, const char *buffer,
 		int frag_size = min(line6->max_packet_size, size - i);
 		int retval;
 
-		retval = usb_interrupt_msg(line6->usbdev,
-					usb_sndintpipe(line6->usbdev,
-						line6->properties->ep_ctrl_w),
-					(char *)frag_buf, frag_size,
-					&partial, LINE6_TIMEOUT * HZ);
+		if (line6->properties->capabilities & LINE6_CAP_CONTROL_MIDI) {
+			retval = usb_interrupt_msg(line6->usbdev,
+						line6->pipe_ctrl_w,
+						(char *)frag_buf, frag_size,
+						&partial, LINE6_TIMEOUT * HZ);
+		} else {
+			retval = usb_bulk_msg(line6->usbdev,
+						line6->pipe_ctrl_w,
+						(char *)frag_buf, frag_size,
+						&partial, LINE6_TIMEOUT * HZ);
+		}
 
 		if (retval) {
 			dev_err(line6->ifcdev,
-				"usb_interrupt_msg failed (%d)\n", retval);
+				"usb_bulk_msg failed (%d)\n", retval);
 			break;
 		}
 
@@ -141,7 +147,7 @@ static int line6_send_raw_message_async_part(struct message *msg,
 	int bytes = min(msg->size - done, line6->max_packet_size);
 
 	usb_fill_int_urb(urb, line6->usbdev,
-		usb_sndintpipe(line6->usbdev, line6->properties->ep_ctrl_w),
+		line6->pipe_ctrl_w,
 		(char *)msg->buffer + done, bytes,
 		line6_async_request_sent, msg, line6->interval);
 
@@ -462,7 +468,9 @@ static void line6_destruct(struct snd_card *card)
 static void line6_get_interval(struct usb_line6 *line6)
 {
 	struct usb_device *usbdev = line6->usbdev;
-	struct usb_host_endpoint *ep = usbdev->ep_in[line6->properties->ep_ctrl_r];
+	struct usb_host_endpoint *ep =
+		usbdev->ep_in[usb_pipeendpoint(line6->pipe_ctrl_r)];
+
 	if (ep) {
 		line6->interval = ep->desc.bInterval;
 		if (usbdev->speed == USB_SPEED_LOW) {
@@ -570,6 +578,18 @@ int line6_probe(struct usb_interface *interface,
 		goto error;
 	}
 
+	if (properties->capabilities & LINE6_CAP_CONTROL_MIDI) {
+		line6->pipe_ctrl_r =
+			usb_rcvintpipe(line6->usbdev, line6->properties->ep_ctrl_r);
+		line6->pipe_ctrl_w =
+			usb_sndintpipe(line6->usbdev, line6->properties->ep_ctrl_w);
+	} else {
+		line6->pipe_ctrl_r =
+			usb_rcvbulkpipe(line6->usbdev, line6->properties->ep_ctrl_r);
+		line6->pipe_ctrl_w =
+			usb_sndbulkpipe(line6->usbdev, line6->properties->ep_ctrl_w);
+	}
+
 	line6_get_interval(line6);
 
 	if (properties->capabilities & LINE6_CAP_CONTROL_MIDI) {
diff --git a/sound/usb/line6/driver.h b/sound/usb/line6/driver.h
index 2551cb5..8bde170 100644
--- a/sound/usb/line6/driver.h
+++ b/sound/usb/line6/driver.h
@@ -143,6 +143,9 @@ struct usb_line6 {
 	/* Line 6 MIDI device data structure */
 	struct snd_line6_midi *line6midi;
 
+	/* pipes for the respective R/W data endpoints */
+	unsigned int pipe_ctrl_r, pipe_ctrl_w;
+
 	/* URB for listening to POD data endpoint */
 	struct urb *urb_listen;
 
-- 
1.9.1

